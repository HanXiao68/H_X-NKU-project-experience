#include "sys.h"
#include "delay.h"
#include "usart.h"
#include "led.h"
#include "beep.h"
#include "dac.h"
#include "pwm.h"
#include "timer.h"
   
void selfcheck(void);			//自检函数声明

//ALIENTEK 探索者STM32F407开发板 实验4
//串口通信实验 -库函数版本
//技术支持：www.openedv.com
//淘宝店铺：http://eboard.taobao.com
//广州市星翼电子科技有限公司  
//作者：正点原子 @ALIENTEK


/********************注释********************

速度：carSpeed=0~4000——0~3.3V
     启动值：1700--6A4
	   最大值：4000--FA0
	  
转速：arr
      最小值：arr=4000--FA0  --250Hz
	  
temp160：bit0~4--转角值
         bit5  --转角符号位
		     bit6  --转向复位
		     bit7  --刹车
		     bit8  --自检
		     bit9  --低速
		     bit10 --高速
		     bit11 --断使能
				 bit12~15--空
		 
temp161：bit0~11--速度值
         bit12  --启动
		     bit13  --前进/后退
		     bit14  --喇叭
		     bit15  --前大灯
		 
temp162：bit0~11--转速值
         bit12  --右闪
	    	 bit13  --左闪
	    	 bit14  --右转
		     bit15  --左转

********************************************/




/****************测试用指令******************

前大灯：00 00 00 80 00 00				
左闪灯：00 20 00 00 00 00
右闪灯：00 10 00 00 00 10
鸣笛  ：00 00 00 40 00 00
前进  ：00 00 00 10 00 00     （前进或启动）1800--708  2000-7D0  速度值
倒退  ：00 00 08 37 00 00		
刹车  ：00 00 00 00 80 00
右转  ：00 40 00 00 00 00
左转  ：00 80 00 00 00 00
复位  ：00 00 00 00 40 00		？？？转向复位
自检  ：00 00 00 00 00 01   	
********************************************/





/********************************************

16进制转10进制函数

返回值：10进制数

********************************************/

int Hex_Dec(u16 hex)
{
	u8 i;
	u16 a=0;
	int sum=0;
	
	for(i=0;i<3;++i)
	{			
	    a=hex&0x000f;
	    hex=hex>>4;
		switch(a)
		{
			case 0xa:a=10;break;
			case 0xb:a=11;break;
			case 0xc:a=12;break;
      case 0xd:a=13;break;
      case 0xe:a=14;break;
      case 0xf:a=15;break;
		}
		if(i==0)
			sum=a*1;
		if(i==1)
			sum=sum+a*16;
		if(i==2)
			sum=sum+a*16*16;
	}
	return sum;
}

/****************自检函数***********************/
void selfcheck(){		                                              			
			    printf("\r\n自检启动\r\n");  
				
				LED1=!LED1;
		        delay_ms(2000);
				printf("\r\n前大灯OK\r\n");
			    LED1=!LED1;
			    delay_ms(2000);
				
				BEEP=!BEEP;
			    delay_ms(500);
			    printf("\r\n鸣笛OK\r\n");
			     BEEP=!BEEP;
			     delay_ms(2000);
				
			    LED2=!LED2;
		        delay_ms(2000);
				printf("\r\n右闪灯OK\r\n");
			    LED2=!LED2;
			    delay_ms(2000); 
								
				DAC_SetChannel1Data(DAC_Align_12b_R, 2000);
				printf("\r\n前进OK\r\n");
				Output_Pulse(1800);
				printf("\r\n右转OK\r\n");
				delay_ms(8000); 

//				delay_ms(4000); 

				SHACHE=!SHACHE;
				DAC_SetChannel1Data(DAC_Align_12b_R, 0);
				printf("\r\n刹车OK\r\n");
				delay_ms(500);
				SHACHE=!SHACHE;
				delay_ms(1000);		
				
			    LED3=!LED3;
		        delay_ms(4000);
				printf("\r\n左闪灯OK\r\n");
			    LED3=!LED3;
			    delay_ms(2000);
				
 			    DAOCHE=!DAOCHE;
			 	delay_ms(500);
			    DAC_SetChannel1Data(DAC_Align_12b_R, 2000);
				PA6=!PA6;
				Output_Pulse(18100);
				printf("\r\n倒车OK\r\n");
				delay_ms(8000); 
				
			
				printf("\r\n左转OK\r\n");
//				delay_ms(10000);
				
				SHACHE=!SHACHE;
				DAC_SetChannel1Data(DAC_Align_12b_R, 0);
			    delay_ms(500);
			    SHACHE=!SHACHE;
				delay_ms(500);
				DAOCHE=!DAOCHE;
				printf("\r\n自检结束\r\n");			
}


/********************主函数********************/

int main(void)
{ 
	/********变量定义********/
	
	u8 t=0;
	u8 len=0;	
	u32 i=0;
	u16 res=0;
  u16 temp=0;
	u16 temp160=0;
	u16 temp161=0;
	u16 temp162=0;
	u16 carSpeed=0;
	u16 angel_hex=0;
	u16 rot_speed_hext=0;
	int angel=0;
	int Rangel=0;
	int Langel=0;
	int angel_re=0;
	int rot_speed=0;
	uint8_t statue1=0;
	uint8_t statue2=0;
	uint8_t statue3=0;
	uint8_t statue5=0;
	uint8_t statue6=0;
	uint8_t statue7=0;
	uint8_t statue8=0;
	uint8_t statue9=0;
/*********************初始化***********************/
	
	
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);   //设置系统中断优先级分组2
	delay_init(168);		                          //延时初始化 
	uart_init(115200);	                              //串口初始化波特率为115200
	
	BEEP_Init();
 	QianDaDeng_Init();                                //初始化前大灯 ？？？？？喇叭？？
	ZuoShanDeng_Init();                               //初始化左闪灯
	YouShanDeng_Init();                               //初始化右闪灯
 	ShaChe_Init();                                    //初始化刹车
	DaoChe_Init();                                    //初始化倒车
	GaoSu_Init();                                     //初始化高速
	DiSu_Init();                                      //初始化低速
	HongWai_Init();
	Dac1_Init();                                      //初始化DAC
	NVIC_Config();  					
	GPIO_Config();						//中断向量嵌套控制器，用来管理所有终端和事件的。（包括中断的使能和除能，中断的优先级）?
	GPIO_EN_DIR_Init();				//在GPIO模式下，每个IO都可配置为输入或输出
	TIM2_Master__TIM3_Slave_Configuration(2250);	// 配置TIM2的脉冲输出为10Hz  ？？？？？TIM2为主定时器，TIM3为从定时器
	DAC_SetChannel1Data(DAC_Align_12b_R,carSpeed);       //初始值为0
	
/********主循环********/

	while(1)
	{

		if(Rangel>Langel)
		    angel_re=Rangel-Langel+5000;
		else 
			angel_re=Langel-Rangel+5000;
		
		if(USART_RX_STA&0x8000)               //接收完成   
		{	
            temp160=0;
	        temp161=0;
	        temp162=0;			
		  	len=USART_RX_STA&0x3fff;          //得到此次接收到的数据长度
			printf("\r\n您发送的消息为:\r\n");        

	      /********数据处理********/	
			
			for(t=0;t<len;t++)
			{
				res=USART_RX_BUF[t];          //向串口1发送数据，即串口1接受从串口助手发出的命令
                if(t==0)
				{
					temp160=res;		         
				}
                else if(t==1) 
				{
					temp=res<<8;
					temp160=temp160|temp;     //byte1、2				
				}
				else if(t==2)
				{
					temp161=res;
				}
				else if(t==3)
				{
					temp=res<<8;
					temp161=temp161|temp;     //byte3、4
				}
				else if(t==4)
				{
                    temp162=res;
				}
                else if(t==5)
				{
					temp=res<<8; 
					temp162=temp162|temp;     //byte5、6
				}					
				while(USART_GetFlagStatus(USART1,USART_FLAG_TC)!=SET);  //等待发送结束			
			}
			
	
			/********指令判断********/	
			
			
			if((temp162&0x0040)==0x0040)                        //转向复位
			 {
					   printf("转向复位");
					   if((temp162&0x0020)==0x0020)                      //角度符号位
				   { 
					   printf("转角符号位");
					   if(PA5==1)           //若不是使能，将该位 置0使能
						{
							GPIO_ResetBits(GPIOA,GPIO_Pin_5);
							PA6=!PA6;
							Output_Pulse(angel_re);
						}else 
						{
							PA6=!PA6;
							Output_Pulse(angel_re);
						}
				   }
						 else
				   {
							if(PA5==1)
							{
								PA6=!PA6;
								GPIO_ResetBits(GPIOA,GPIO_Pin_5);
								Output_Pulse(angel_re);
							}
							else 
							{
								PA6=!PA6;
								Output_Pulse(angel_re);	
							}
				   }
				  for(i=0;i<20000;++i)
				   {
						 printf("\r\n未复位\r\n");
						  if(PE3==0)   //应该是转向复位的引脚
						{
							TIM_Cmd(TIM2, DISABLE);
							TIM_Cmd(TIM3, DISABLE);
							angel_re=0;
									printf("\r\n已复位\r\n");
									break;
						}
				   
				  }
			}
			 
		    if((temp162&0x0080)==0x0080)	                    //刹车
			 {
					 
				 statue1 = GPIO_ReadOutputDataBit(GPIOF,  GPIO_Pin_5);
				 if(statue1!=1){					  		
					   GPIO_WriteBit( GPIOF,GPIO_Pin_5,  Bit_SET);  //如果当前不是刹车 ，则刹车位 置1 ，刹车
					   statue1=1;
				}    
					  printf("\r\n刹车\r\n");
				 statue1 = GPIO_ReadOutputDataBit(GPIOF,  GPIO_Pin_5);
					  printf("刹车的当前状态是%d",statue1); 
			 }
			 else {	
                     statue1 = GPIO_ReadOutputDataBit(GPIOF,  GPIO_Pin_5);				 //不刹车
			  		 if(statue1==1) { 
					 GPIO_WriteBit( GPIOF,GPIO_Pin_5,  Bit_RESET);  //如果当前是刹车，则刹车位置0             
				 }
			 }
            if((temp162&0x0100)==0x0100)
				{ 			                                    //自检
				 selfcheck(); 
				}
			if((temp162&0x0200)==0x0200)                       //低速        ？？？？？
			 {
					DISU=!DISU;
				
				 printf("低速的当前状态是%d",statue2);
					printf("\r\n低速挡\r\n"); 
				
			 }	
			if((temp162&0x0400)==0x0400)                       //高速        ？？？？？？？
			 {
					GAOSU=!GAOSU;
				 
				 
					printf("\r\n高速挡\r\n");
			 }   			
			if((temp162&0x0800)==0x0800)                       //断使能       ？？？？？？？？？
			 {
				    statue2 = GPIO_ReadOutputDataBit(GPIOA,  GPIO_Pin_5);
				    printf(" 使能的当前状态是%d",statue2); 
					GPIO_SetBits(GPIOA,GPIO_Pin_5);		       //置位1
					printf("\r\n使能已断\r\n");
				     printf(" 使能的当前状态是%d",statue2); 
			 }            				             
            if((temp161&0x2000)==0x2000)                        //前进/后退
			 {	
				 statue5 = GPIO_ReadOutputDataBit(GPIOF,  GPIO_Pin_7);
				 printf("倒车的当前状态是%d",statue5);
				 
						DAOCHE=!DAOCHE;		
					
					delay_ms(500);
					printf("\r\n倒车\r\n");				
			 }	
			if((temp161&0x1000)==0x1000)	                    //启动并设置速度值
			 {
				    printf("\r\n启动\r\n");
				    carSpeed=Hex_Dec(temp161&0x0fff);                 
			        DAC_SetChannel1Data(DAC_Align_12b_R, carSpeed);		//设置速度值
		            printf("\r\n速度值为：%d\r\n",carSpeed);				
			 }                  					
			if((temp161&0x4000)==0x4000)	                    //鸣笛
			 {
				    
				 statue6 = GPIO_ReadOutputDataBit(GPIOF,  GPIO_Pin_4);
				 printf("鸣笛的当前状态是%d",statue6);
				 if(statue6==0)    {}     //如果当前是鸣笛，则不操作
					 else {
						BEEP=!BEEP;		//如果当前不是鸣笛，则鸣笛位取反
					 }
                    printf("\r\n鸣笛\r\n");				
			 }
			if((temp161&0x8000)==0x8000)                        //前大灯
			 {
				 
				 statue7 = GPIO_ReadOutputDataBit(GPIOF,  GPIO_Pin_1);
				
						 LED1=!LED1;		
				    printf("\r\n前大灯\r\n");				
			 }								
    	    if((temp160&0x1000)==0x1000)	                    //右闪
			 {
		            LED2=!LED2; 
				 statue8 = GPIO_ReadOutputDataBit(GPIOF,  GPIO_Pin_2);
				 printf("右闪的当前状态是%d",statue8);
				 
								
		
			        printf("\r\n右闪灯\r\n");				
			 }
			if((temp160&0x2000)==0x2000)	                    //左闪
			{
		            LED3=!LED3;
				statue9 = GPIO_ReadOutputDataBit(GPIOF,  GPIO_Pin_3);
				 printf("左闪的当前状态statue是%d",statue9);
				  if(statue9==0)    {}     //如果当前是前大灯亮，则不操作
					 else if(statue8==1){
						 LED2=!LED2;		//如果当前前大灯不亮，则前大灯位取反
					 }
			        printf("\r\n左闪灯\r\n");				
			}			
            if((temp160&0x4000)==0x4000)	                    //右转
			{
                    printf("\r\n右转\r\n");
					GPIO_ResetBits(GPIOA,GPIO_Pin_6);		
				if(PE3==0)
					Rangel=0;					
				if(carSpeed>=2000)			
				{
					DAC_SetChannel1Data(DAC_Align_12b_R, 1800);
					printf("\r\n当前速度值：%d\r\n",1800);
				}								    
                else
                    DAC_SetChannel1Data(DAC_Align_12b_R, 1600);							
				
				angel_hex=temp160&0x001f;                       //角度
				angel=Hex_Dec(angel_hex);
				printf("\r\n转向角度值：%d°\r\n",angel);
				
				rot_speed_hext=temp162&0x0fff;	            		//转速		
				rot_speed=Hex_Dec(rot_speed_hext);              	
				Frequence_Setting(rot_speed);		
                rot_speed=(1e6)/rot_speed;				
				printf("\r\n频率：%dHz\r\n",rot_speed);
							
				angel=angel/0.0225;                            //脉冲数
				Output_Pulse(angel);  
				Rangel=angel+Rangel;
			}
            if((temp160&0x8000)==0x8000)	                    //左转
			{

                   printf("\r\n左转\r\n");	
				   GPIO_SetBits(GPIOA,GPIO_Pin_6);	
				if(PE3==0)
					Langel=0;					
				if(carSpeed>=2000)			
				{
					DAC_SetChannel1Data(DAC_Align_12b_R, 1800);
					printf("\r\n当前速度值：%d\r\n",1800);
				}								    
				else
				    DAC_SetChannel1Data(DAC_Align_12b_R, 1600);	
						
						angel_hex=temp160&0x001f;                       //角度
						angel=Hex_Dec(angel_hex);
						printf("\r\n转向角度值：%d°\r\n",angel);
						
						rot_speed_hext=temp162&0x0fff;	            		//转速		
						rot_speed=Hex_Dec(rot_speed_hext);              	
						Frequence_Setting(rot_speed);		
				        rot_speed=(1e6)/rot_speed;				
						printf("\r\n频率：%dHz\r\n",rot_speed);
						angel=angel/0.0225;                            //脉冲数

						Output_Pulse(angel);
						Langel=angel+Langel;
			}			
					printf("\r\n\r\n");//插入换行
					USART_RX_STA=0;
	    }    //接收数据 if（）结束
	}     // while()结束
}     //main（）结束

